{"remainingRequest":"F:\\Vue Practice\\Chetan\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\Vue Practice\\Chetan\\src\\components\\VideoPlayer.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\Vue Practice\\Chetan\\src\\components\\VideoPlayer.vue","mtime":1547883734000},{"path":"F:\\Vue Practice\\Chetan\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\Vue Practice\\Chetan\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Vue Practice\\Chetan\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nimport ShakaPlayer from 'shaka-player';\nexport default {\n    props:['source'],\n    mounted(){\n        this.init();\n    },\n    methods: {\n        init (){\n            //eslint-disable-next-line\n            console.log('Player initiated');\n            // Install built-in polyfills to patch browser incompatibilities.\n            ShakaPlayer.polyfill.installAll();\n\n            // Check to see if the browser supports the basic APIs Shaka needs.\n            if (ShakaPlayer.Player.isBrowserSupported()) {\n                // Everything looks good!\n                this.initPlayer();\n            } else {\n                // This browser does not have the minimum set of APIs we need.\n                //eslint-disable-next-line\n                console.error('Browser not supported!');\n            }\n        },\n        initPlayer() {\n            // Create a Player instance.\n            var video = this.$refs.video;\n            var player = new ShakaPlayer.Player(video);\n\n            // Attach player to the window to make it easy to access in the JS console.\n            window.player = player;\n\n            // Listen for error events.\n            player.addEventListener('error', this.onErrorEvent);\n\n            // Try to load a manifest.\n            // This is an asynchronous process.\n            player.load(this.source.manifestUri).then(function() {\n                // This runs if the asynchronous load is suvueccessful.\n                //eslint-disable-next-line\n                console.log('The video has now been loaded!');\n            }).catch(this.onError);  // onError is executed if the asynchronous load fails.\n        },\n        onErrorEvent(event){\n            // Extract the shaka.util.Error object from the event.\n            this.onError(event.detail);\n        },\n        onError(error){\n            // Log the error.\n            //eslint-disable-next-line\n            console.error('Error code', error.code, 'object', error);\n        }\n        \n    }\n}\n",{"version":3,"sources":["VideoPlayer.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"VideoPlayer.vue","sourceRoot":"components","sourcesContent":["<template>\n    <div v-if=\"source\">\n        <video ref=\"video\"\n           width=\"100%\"\n           poster=\"//shaka-player-demo.appspot.com/assets/poster.jpg\"\n           controls autoplay></video>\n    </div>\n</template>\n<script>\nimport ShakaPlayer from 'shaka-player';\nexport default {\n    props:['source'],\n    mounted(){\n        this.init();\n    },\n    methods: {\n        init (){\n            //eslint-disable-next-line\n            console.log('Player initiated');\n            // Install built-in polyfills to patch browser incompatibilities.\n            ShakaPlayer.polyfill.installAll();\n\n            // Check to see if the browser supports the basic APIs Shaka needs.\n            if (ShakaPlayer.Player.isBrowserSupported()) {\n                // Everything looks good!\n                this.initPlayer();\n            } else {\n                // This browser does not have the minimum set of APIs we need.\n                //eslint-disable-next-line\n                console.error('Browser not supported!');\n            }\n        },\n        initPlayer() {\n            // Create a Player instance.\n            var video = this.$refs.video;\n            var player = new ShakaPlayer.Player(video);\n\n            // Attach player to the window to make it easy to access in the JS console.\n            window.player = player;\n\n            // Listen for error events.\n            player.addEventListener('error', this.onErrorEvent);\n\n            // Try to load a manifest.\n            // This is an asynchronous process.\n            player.load(this.source.manifestUri).then(function() {\n                // This runs if the asynchronous load is suvueccessful.\n                //eslint-disable-next-line\n                console.log('The video has now been loaded!');\n            }).catch(this.onError);  // onError is executed if the asynchronous load fails.\n        },\n        onErrorEvent(event){\n            // Extract the shaka.util.Error object from the event.\n            this.onError(event.detail);\n        },\n        onError(error){\n            // Log the error.\n            //eslint-disable-next-line\n            console.error('Error code', error.code, 'object', error);\n        }\n        \n    }\n}\n</script>"]}]}